export const runtime="nodejs";
import { NextResponse } from "next/server";import { z } from "zod";import { openai } from "@/lib/openai";
const schema=z.object({lat:z.number(),lng:z.number(),context:z.object({placeDescription:z.string().optional(),address:z.string().optional()}).optional()});
async function tflDisruptions(){try{const app_key=process.env.TFL_APP_KEY;const app_id=process.env.TFL_APP_ID;if(!app_key||!app_id)return null;const url=`https://api.tfl.gov.uk/Road/all?app_id=${app_id}&app_key=${app_key}`;const r=await fetch(url,{cache:"no-store"});if(!r.ok)return null;return await r.json();}catch{return null;}}
export async function POST(req:Request){if(!process.env.OPENAI_API_KEY){return NextResponse.json({error:"OPENAI_API_KEY is not set"},{status:400});}try{const json=await req.json();const {lat,lng,context}=schema.parse(json);const tfl=await tflDisruptions();const prompt=`Infer access risks for a specific address using minimal inputs.\nReturn JSON with fields: autoChecklist (object), risks (string[]), notes (string).\nConsider: likely presence of stairs/lift, kerbside parking likelihood, rear access probability, large vehicle access probability. Use conservative assumptions.\nIf TfL road info is present, mention disruptions/closures generically.\nLocation: (${lat}, ${lng})\nContext: ${JSON.stringify(context||{})}\nTfL: ${tfl?"available":"none"}\nRespond with JSON only.`;
const completion=await openai.chat.completions.create({model:process.env.OPENAI_MODEL||"gpt-4o-mini",temperature:0.2,messages:[{role:"user",content:prompt}]});
const content=completion.choices[0]?.message?.content?.trim()||"{}";let parsed;try{parsed=JSON.parse(content);}catch{const m=content.match(/\{[\s\S]*\}$/);parsed=m?JSON.parse(m[0]):{autoChecklist:{},risks:[],notes:""};}return NextResponse.json(parsed);}catch(e:any){return NextResponse.json({error:e?.message||"Bad request"},{status:400});}}
