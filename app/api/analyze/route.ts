export const runtime="nodejs";
import { NextResponse } from "next/server";import { z } from "zod";import { openai } from "@/lib/openai";import type { AIResult, AnalysisPayload } from "@/types";
const payloadSchema=z.object({origin:z.object({description:z.string(),place_id:z.string(),lat:z.number(),lng:z.number(),address:z.string().optional()}),destination:z.object({description:z.string(),place_id:z.string(),lat:z.number(),lng:z.number(),address:z.string().optional()}),route:z.object({distance_m:z.number(),duration_s:z.number(),duration_in_traffic_s:z.number().optional()}).nullable(),weather:z.object({temperature:z.number(),windspeed:z.number(),winddirection:z.number(),weathercode:z.number()}).nullable(),checklist:z.object({hasLift:z.boolean(),stairsFlights:z.number().int().min(0),narrowDoor:z.boolean(),rearAccess:z.boolean(),parkingAvailable:z.boolean(),largeVehicleAccess:z.boolean()}),building:z.object({doorWidthCm:z.number().min(0).nullable().optional(),stairWidthCm:z.number().min(0).nullable().optional(),floors:z.number().int().min(0).nullable().optional()})});
export async function POST(req:Request){if(!process.env.OPENAI_API_KEY){return NextResponse.json({error:"OPENAI_API_KEY is not set"},{status:400});}try{const json=await req.json();const payload=payloadSchema.parse(json) as AnalysisPayload;const prompt=`You are an operations planner for moving/delivery crews.\nGiven structured data, produce JSON guidance that also compares Origin vs Destination access.\n\nRETURN JSON with keys:\n- summary (string, concise, plain language)\n- crewRecommendation (string)\n- equipment (string[])\n- riskLevel ("Low"|"Medium"|"High")\n- keyRisks (string[])\n- parkingNotes (string)\n- complianceChecklist (string[])\n- originVsDest (string) // contrast differences in access, parking, stairs, etc.\n- autoChecklist (Checklist) // object with inferred booleans/numbers (hasLift, stairsFlights, narrowDoor, rearAccess, parkingAvailable, largeVehicleAccess)\n\nData:\n- Origin: ${payload.origin.description} (${payload.origin.lat}, ${payload.origin.lng})\n- Destination: ${payload.destination.description} (${payload.destination.lat}, ${payload.destination.lng})\n- Route: ${payload.route ? `${payload.route.distance_m} meters, base ${payload.route.duration_s} sec${payload.route.duration_in_traffic_s ? ", traffic "+payload.route.duration_in_traffic_s+" sec" : ""}` : "unknown"}\n- Weather: ${payload.weather ? `Temp ${payload.weather.temperature}Â°C, Wind ${payload.weather.windspeed} km/h` : "unknown"}\n- User checklist (may be incomplete): ${JSON.stringify(payload.checklist)}\n- Building info: ${JSON.stringify(payload.building)}\n\nInstructions:\n- Prefer practical recommendations (crew size, stair-climber, ramps, covers).\n- Consider traffic time if provided.\n- If fields are unknown, infer plausibly but be conservative.\n- Respond ONLY with JSON.`;
const completion=await openai.chat.completions.create({model:process.env.OPENAI_MODEL||"gpt-4o-mini",temperature:0.2,messages:[{role:"system",content:"You produce concise JSON-only operational guidance."},{role:"user",content:prompt}]});
const content=completion.choices[0]?.message?.content?.trim()||"{}";let parsed:AIResult;try{parsed=JSON.parse(content);}catch{const m=content.match(/\{[\s\S]*\}$/);parsed=m?JSON.parse(m[0]):{summary:"AI summary unavailable.",crewRecommendation:"2-person crew by default.",equipment:[],riskLevel:"Medium",keyRisks:[],parkingNotes:"",complianceChecklist:[],originVsDest:"",autoChecklist:{hasLift:false,stairsFlights:0,narrowDoor:false,rearAccess:false,parkingAvailable:true,largeVehicleAccess:true}};}return NextResponse.json(parsed);}catch(err:any){return NextResponse.json({error:err?.message||"Unknown error"},{status:400});}}
