export const runtime="nodejs";
import { NextResponse } from "next/server";import { z } from "zod";import { openai } from "@/lib/openai";import type { AnalysisPayload, AIResult } from "@/types";
const schema=z.object({origin:z.object({description:z.string(),place_id:z.string(),lat:z.number(),lng:z.number(),address:z.string().optional(),types:z.array(z.string()).optional()}),destination:z.object({description:z.string(),place_id:z.string(),lat:z.number(),lng:z.number(),address:z.string().optional(),types:z.array(z.string()).optional()}),moveDateISO:z.string(),vehicleType:z.string(),route:z.object({distance_m:z.number(),duration_s:z.number(),duration_in_traffic_s:z.number().optional()}).nullable(),weather:z.object({date:z.string(),tmax:z.number().nullable(),tmin:z.number().nullable(),windspeed:z.number().nullable(),precipitation_mm:z.number().nullable()}).nullable(),checklist:z.object({hasLift:z.boolean(),stairsFlights:z.number().int().min(0),narrowDoor:z.boolean(),rearAccess:z.boolean(),parkingAvailable:z.boolean(),largeVehicleAccess:z.boolean()})});
export async function POST(req:Request){if(!process.env.OPENAI_API_KEY)return NextResponse.json({error:"OPENAI_API_KEY not set"},{status:400});try{const payload=schema.parse(await req.json()) as AnalysisPayload;const prompt=`You are a logistics planner. Plan a move using the data below.\nReturn JSON with keys: summary, crewRecommendation, equipment[], riskLevel, keyRisks[], parkingNotes, complianceChecklist[], originVsDest, autoChecklist.\n- Consider vehicle type limits (turning radius, height/weight), parking feasibility, and likely access constraints.\n- Consider the move date and the forecast (if available). If unknown, do not guess weather.\n- Use conservative defaults; if unknown, say so.\n- If no lift and stairsFlights >= 2, consider extra crew or stair climber.\n- Compare Origin vs Destination succinctly.\n\nPayload:\n${JSON.stringify(payload,null,2)}\n\nRespond with JSON only.`;const r=await openai.chat.completions.create({model:process.env.OPENAI_MODEL||"gpt-4o-mini",temperature:0.2,messages:[{role:"system",content:"You produce concise JSON-only operational guidance."},{role:"user",content:prompt}]});const content=r.choices[0]?.message?.content?.trim()||"{}";let parsed:AIResult;try{parsed=JSON.parse(content);}catch{const m=content.match(/\{[\s\S]*\}$/);parsed=m?JSON.parse(m[0]):{summary:"AI summary unavailable.",crewRecommendation:"2-person crew by default.",equipment:[],riskLevel:"Medium",keyRisks:[],parkingNotes:"",complianceChecklist:[],originVsDest:"",autoChecklist:{hasLift:false,stairsFlights:0,narrowDoor:false,rearAccess:false,parkingAvailable:true,largeVehicleAccess:true}};}return NextResponse.json(parsed);}catch(e:any){return NextResponse.json({error:e?.message||"Bad request"},{status:400});}}
