"use client";
import { useEffect, useMemo, useState } from "react";import AddressAutocomplete from "@/components/AddressAutocomplete";import TrafficRouteMap from "@/components/TrafficRouteMap";import DualStreetView from "@/components/DualStreetView";import PdfExport from "@/components/PdfExport";import type { AnalysisPayload, AIResult, Checklist as ChecklistType, PlaceLite, Weather } from "@/types";import { clsx } from "@/lib/utils";
export default function Page(){const [originText,setOriginText]=useState("");const [destText,setDestText]=useState("");const [origin,setOrigin]=useState<PlaceLite|null>(null);const [destination,setDestination]=useState<PlaceLite|null>(null);const [route,setRoute]=useState<{distance_m:number;duration_s:number;duration_in_traffic_s?:number}|null>(null);const [weather,setWeather]=useState<Weather|null>(null);const [checklist,setChecklist]=useState<ChecklistType>({hasLift:false,stairsFlights:0,narrowDoor:false,rearAccess:false,parkingAvailable:true,largeVehicleAccess:true});const [buildingDoorWidth,setBuildingDoorWidth]=useState<number|"">("");const [buildingStairWidth,setBuildingStairWidth]=useState<number|"">("");const [buildingFloors,setBuildingFloors]=useState<number|"">("");const [ai,setAI]=useState<AIResult|null>(null);const [loadingAI,setLoadingAI]=useState(false);const [error,setError]=useState<string|null>(null);
const payload:AnalysisPayload|null=useMemo(()=>{if(!origin||!destination)return null;return{origin,destination,route,weather,checklist,building:{doorWidthCm:typeof buildingDoorWidth==="number"?buildingDoorWidth:null,stairWidthCm:typeof buildingStairWidth==="number"?buildingStairWidth:null,floors:typeof buildingFloors==="number"?buildingFloors:null}};},[origin,destination,route,weather,checklist,buildingDoorWidth,buildingStairWidth,buildingFloors]);
useEffect(()=>{const load=async()=>{if(!destination)return;try{const r=await fetch(`/api/weather?lat=${destination.lat}&lng=${destination.lng}`);if(!r.ok)throw new Error("Weather fetch failed");setWeather(await r.json());}catch(e){console.error(e);}};load();},[destination?.place_id]);
useEffect(()=>{const auto=async()=>{if(!destination)return;try{const r=await fetch("/api/risk",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({lat:destination.lat,lng:destination.lng,context:{placeDescription:destination.description,address:destination.address}})});if(!r.ok)return;const d=await r.json();if(d?.autoChecklist){setChecklist(prev=>({...prev,...d.autoChecklist}));}}catch(e){console.error(e);}};auto();},[destination?.place_id]);
const analyze=async()=>{if(!payload)return;setLoadingAI(true);setError(null);try{const r=await fetch("/api/analyze",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(payload)});const t=await r.text();if(!r.ok){try{const j=JSON.parse(t);throw new Error(j.error||t);}catch{throw new Error(t);}}const data:AIResult=JSON.parse(t);setAI(data);if(data?.autoChecklist)setChecklist(prev=>({...prev,...data.autoChecklist}));}catch(e:any){setError(e?.message||"Analysis failed");}finally{setLoadingAI(false);}};
const canAnalyze=Boolean(origin&&destination);
return (<div className="space-y-6"><section className="grid lg:grid-cols-3 gap-6"><div className="lg:col-span-1 card" style={{padding:'1rem'}}><h2 className="text-lg" style={{fontWeight:600,marginBottom:12}}>Inputs</h2><div className="space-y-4"><AddressAutocomplete id="origin" label="Origin" placeholder="Enter origin (depot/home)" value={originText} onChange={setOriginText} onPlaceResolved={setOrigin} /><AddressAutocomplete id="destination" label="Destination" placeholder="Enter destination (customer/site)" value={destText} onChange={setDestText} onPlaceResolved={setDestination} /><div className="grid grid-cols-3" style={{gap:12}}><div><label className="label">Door width (cm)</label><input className="input" type="number" min={0} value={buildingDoorWidth} onChange={e=>setBuildingDoorWidth(e.target.value===""?"":Number(e.target.value))} /></div><div><label className="label">Stair width (cm)</label><input className="input" type="number" min={0} value={buildingStairWidth} onChange={e=>setBuildingStairWidth(e.target.value===""?"":Number(e.target.value))} /></div><div><label className="label">Floors</label><input className="input" type="number" min={0} value={buildingFloors} onChange={e=>setBuildingFloors(e.target.value===""?"":Number(e.target.value))} /></div></div><div className="space-y-2"><p className="label">Auto Risk & Access</p><div className="grid sm:grid-cols-2" style={{gap:8,fontSize:14}}><label className="flex items-center" style={{gap:8}}><input type="checkbox" className="size-4" checked={checklist.hasLift} onChange={e=>setChecklist({...checklist,hasLift:e.target.checked})} /><span>Lift available</span></label><label className="flex items-center" style={{gap:8}}><span style={{width:120}}>Flights of stairs</span><input type="number" min={0} className="input" value={checklist.stairsFlights} onChange={e=>setChecklist({...checklist,stairsFlights:Number(e.target.value)})} /></label><label className="flex items-center" style={{gap:8}}><input type="checkbox" className="size-4" checked={checklist.narrowDoor} onChange={e=>setChecklist({...checklist,narrowDoor:e.target.checked})} /><span>Narrow doorways</span></label><label className="flex items-center" style={{gap:8}}><input type="checkbox" className="size-4" checked={checklist.rearAccess} onChange={e=>setChecklist({...checklist,rearAccess:e.target.checked})} /><span>Rear access</span></label><label className="flex items-center" style={{gap:8}}><input type="checkbox" className="size-4" checked={checklist.parkingAvailable} onChange={e=>setChecklist({...checklist,parkingAvailable:e.target.checked})} /><span>Parking available</span></label><label className="flex items-center" style={{gap:8}}><input type="checkbox" className="size-4" checked={checklist.largeVehicleAccess} onChange={e=>setChecklist({...checklist,largeVehicleAccess:e.target.checked})} /><span>Large vehicle access</span></label></div><p className="text-xs" style={{opacity:.7}}>Auto-filled from address with AI (and TfL if configured). Adjust if needed.</p></div><div className="flex" style={{gap:12}}><button className={clsx("btn btn-primary",!canAnalyze&&"opacity-50 pointer-events-none")} onClick={analyze} title={!canAnalyze?"Select Origin and Destination first":""}>{loadingAI?"Analyzing...":"Analyze Address"}</button><PdfExport ai={ai} payload={payload} /></div>{error&&<div className="text-sm" style={{padding:.75+'rem',borderRadius:12,border:'1px solid #7f1d1d',background:'rgba(127,29,29,.3)',color:'#fecaca'}}>{error}</div>}</div></div><div className="lg:col-span-2 space-y-6"><div className="card" style={{padding:'1rem'}}><h2 className="text-lg" style={{fontWeight:600,marginBottom:12}}>Dual Street View</h2><DualStreetView origin={origin} destination={destination} /></div><div className="card" style={{padding:'1rem'}}><h2 className="text-lg" style={{fontWeight:600,marginBottom:12}}>Route (with Traffic)</h2><TrafficRouteMap origin={origin} destination={destination} onRoute={setRoute} /></div><div className="grid md:grid-cols-2" style={{gap:24}}><div className="card" style={{padding:'1rem'}}><h3 className="font-semibold" style={{marginBottom:8}}>Weather (Destination)</h3>{weather?(<div className="text-sm" style={{display:'grid',gridTemplateColumns:'repeat(2,minmax(0,1fr))',gap:8}}><div className="badge">Temperature <strong style={{marginLeft:4}}>{weather.temperature} °C</strong></div><div className="badge">Wind <strong style={{marginLeft:4}}>{weather.windspeed} km/h</strong></div><div className="badge">Direction <strong style={{marginLeft:4}}>{Math.round(weather.winddirection)}°</strong></div><div className="badge">Code <strong style={{marginLeft:4}}>{weather.weathercode}</strong></div></div>):(<p className="text-sm" style={{opacity:.7}}>Select a destination to see live weather.</p>)}</div><div className="card" style={{padding:'1rem'}}><h3 className="font-semibold" style={{marginBottom:8}}>AI Summary</h3>{ai?(<div className="space-y-2 text-sm"><p>{ai.summary}</p><div><p style={{opacity:.7}}>Origin vs Destination:</p><p>{ai.originVsDest}</p></div><div><p style={{opacity:.7}}>Crew:</p><p>{ai.crewRecommendation}</p></div></div>):(<p className="text-sm" style={{opacity:.7}}>Click <em>Analyze Address</em> for AI recommendations and comparisons.</p>)}</div></div><div className="card" style={{padding:'1rem'}}><h3 className="font-semibold" style={{marginBottom:8}}>Details</h3>{ai?(<div className="grid md:grid-cols-3" style={{gap:16,fontSize:14}}><div><p style={{opacity:.7,marginBottom:4}}>Equipment</p><ul style={{marginLeft:'1.25rem',listStyle:'disc'}}>{ai.equipment.map((e,i)=>(<li key={i}>{e}</li>))}</ul></div><div><p style={{opacity:.7,marginBottom:4}}>Key Risks</p><ul style={{marginLeft:'1.25rem',listStyle:'disc'}}>{ai.keyRisks.map((e,i)=>(<li key={i}>{e}</li>))}</ul></div><div><p style={{opacity:.7,marginBottom:4}}>Parking Notes</p><p>{ai.parkingNotes||"—"}</p></div></div>):(<p className="text-sm" style={{opacity:.7}}>AI details will appear here.</p>)}</div><div className="card" style={{padding:'1rem'}}><h3 className="font-semibold" style={{marginBottom:8}}>Compliance Checklist</h3>{ai?(<ol style={{marginLeft:'1.25rem',listStyle:'decimal',fontSize:14}}>{ai.complianceChecklist.map((c,i)=>(<li key={i}>{c}</li>))}</ol>):(<p className="text-sm" style={{opacity:.7}}>AI will suggest documents and compliance steps here.</p>)}</div></div></section></div>);}
