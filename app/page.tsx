"use client";
import { useEffect, useMemo, useState } from "react";import AddressAutocomplete from "@/components/AddressAutocomplete";import TrafficRouteMap from "@/components/TrafficRouteMap";import StreetViewToggle from "@/components/StreetViewToggle";import PdfExport from "@/components/PdfExport";import type { AnalysisPayload, AIResult, Checklist as ChecklistType, PlaceLite, WeatherDaily } from "@/types";import { clsx } from "@/lib/utils";
const VEHICLES=["Small Van","Luton Van","7.5T","12T","18T","Artic"] as const;
export default function Page(){const [originText,setOriginText]=useState("");const [destText,setDestText]=useState("");const [origin,setOrigin]=useState<PlaceLite|null>(null);const [destination,setDestination]=useState<PlaceLite|null>(null);const [moveDateISO,setMoveDateISO]=useState<string>(()=>new Date().toISOString().slice(0,10));const [vehicleType,setVehicleType]=useState<string>("Luton Van");const [route,setRoute]=useState<{distance_m:number;duration_s:number;duration_in_traffic_s?:number}|null>(null);const [weather,setWeather]=useState<WeatherDaily|null>(null);const [checklist,setChecklist]=useState<ChecklistType>({hasLift:false,stairsFlights:0,narrowDoor:false,rearAccess:false,parkingAvailable:true,largeVehicleAccess:true});const [ai,setAI]=useState<AIResult|null>(null);const [loadingAI,setLoadingAI]=useState(false);const [error,setError]=useState<string|null>(null);
const payload:AnalysisPayload|null=useMemo(()=>{if(!origin||!destination)return null;return{origin,destination,moveDateISO,vehicleType,route,weather,checklist};},[origin,destination,moveDateISO,vehicleType,route,weather,checklist]);
useEffect(()=>{const run=async()=>{if(!destination||!moveDateISO)return;try{const r=await fetch(`/api/weather?lat=${destination.lat}&lng=${destination.lng}&date=${moveDateISO}`);if(!r.ok)throw new Error("Weather fetch failed");setWeather(await r.json());}catch(e){console.error(e);}};run();},[destination?.place_id,moveDateISO]);
const analyze=async()=>{if(!payload)return;setLoadingAI(true);setError(null);try{const res=await fetch("/api/analyze",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(payload)});const text=await res.text();if(!res.ok){try{const j=JSON.parse(text);throw new Error(j.error||text);}catch{throw new Error(text);}}const data:AIResult=JSON.parse(text);setAI(data);if(data?.autoChecklist)setChecklist(prev=>({...prev,...data.autoChecklist}));}catch(e:any){setError(e?.message||"Analysis failed");}finally{setLoadingAI(false);}};const canAnalyze=Boolean(origin&&destination&&moveDateISO&&vehicleType);
return(<div className="space-y-6"><section className="grid lg:grid-cols-3 gap-6"><div className="lg:col-span-1 card" style={{padding:'1rem'}}><h2 className="text-lg" style={{fontWeight:600,marginBottom:12}}>Plan Inputs</h2><div className="space-y-4"><AddressAutocomplete id="origin" label="Origin" placeholder="Enter origin address" value={originText} onChange={setOriginText} onPlaceResolved={setOrigin} /><AddressAutocomplete id="destination" label="Destination" placeholder="Enter destination address" value={destText} onChange={setDestText} onPlaceResolved={setDestination} /><div className="grid grid-cols-2" style={{gap:12}}><div><label className="label">Move date</label><input type="date" className="input" value={moveDateISO} onChange={e=>setMoveDateISO(e.target.value)} /></div><div><label className="label">Vehicle type</label><select className="input" value={vehicleType} onChange={e=>setVehicleType(e.target.value)}>{VEHICLES.map(v=>(<option key={v} value={v}>{v}</option>))}</select></div></div><div className="flex" style={{gap:12}}><button className={clsx("btn btn-primary",!canAnalyze&&"opacity-50 pointer-events-none")} onClick={analyze} title={!canAnalyze?"Select addresses, date and vehicle":""}>{loadingAI?"Analyzing...":"Analyze Plan"}</button><PdfExport ai={ai} payload={payload} /></div>{error&&<div className="text-sm" style={{padding:.75+'rem',borderRadius:12,border:'1px solid #7f1d1d',background:'rgba(127,29,29,.3)',color:'#fecaca'}}>{error}</div>}</div></div><div className="lg:col-span-2 space-y-6"><div className="card" style={{padding:'1rem'}}><h2 className="text-lg" style={{fontWeight:600,marginBottom:12}}>Street View</h2><StreetViewToggle origin={origin} destination={destination} /></div><div className="card" style={{padding:'1rem'}}><h2 className="text-lg" style={{fontWeight:600,marginBottom:12}}>Route (with Traffic)</h2><TrafficRouteMap origin={origin} destination={destination} onRoute={setRoute} /></div><div className="card" style={{padding:'1rem'}}><h3 className="font-semibold" style={{marginBottom:8}}>AI Summary</h3>{ai?(<div className="space-y-2 text-sm"><p><span style={{opacity:.7}}>Risk:</span> <span style={{fontWeight:600}}>{ai.riskLevel}</span></p><p>{ai.summary}</p><div><p style={{opacity:.7}}>Origin vs Destination:</p><p>{ai.originVsDest}</p></div><div><p style={{opacity:.7}}>Crew:</p><p>{ai.crewRecommendation}</p></div><div><p style={{opacity:.7}}>Equipment:</p><ul style={{marginLeft:'1.25rem',listStyle:'disc'}}>{ai.equipment.map((e,i)=>(<li key={i}>{e}</li>))}</ul></div></div>):(<p className="text-sm" style={{opacity:.7}}>Click <em>Analyze Plan</em> to see recommendations.</p>)}</div></div></section></div>);}
