"use client";
import { useEffect, useMemo, useState } from "react";import AddressAutocomplete from "@/components/AddressAutocomplete";import TrafficRouteMap from "@/components/TrafficRouteMap";import StreetViewToggle from "@/components/StreetViewToggle";import PdfExport from "@/components/PdfExport";import type { AnalysisPayload, AIResult, Checklist as ChecklistType, PlaceLite, WeatherDaily, PropertySummary, TrafficEvent } from "@/types";import { clsx } from "@/lib/utils";
const VEHICLES=["Small Van","Luton Van","7.5T","12T","18T","Artic"] as const;
export default function Page(){const [originText,setOriginText]=useState("");const [destText,setDestText]=useState("");const [origin,setOrigin]=useState<PlaceLite|null>(null);const [destination,setDestination]=useState<PlaceLite|null>(null);const [moveDateISO,setMoveDateISO]=useState<string>(()=>new Date().toISOString().slice(0,10));const [vehicleType,setVehicleType]=useState<string>("Luton Van");const [route,setRoute]=useState<{distance_m:number;duration_s:number;duration_in_traffic_s?:number}|null>(null);const [weather,setWeather]=useState<WeatherDaily|null>(null);const [checklist,setChecklist]=useState<ChecklistType>({hasLift:false,stairsFlights:0,narrowDoor:false,rearAccess:false,parkingAvailable:true,largeVehicleAccess:true});const [ai,setAI]=useState<AIResult|null>(null);const [error,setError]=useState<string|null>(null);const [loadingAI,setLoadingAI]=useState(false);const [property,setProperty]=useState<PropertySummary|null>(null);const [trafficEvents,setTrafficEvents]=useState<TrafficEvent[]>([]);
const payload:AnalysisPayload|null=useMemo(()=>{if(!origin||!destination)return null;return{origin,destination,moveDateISO,vehicleType,route,weather,checklist};},[origin,destination,moveDateISO,vehicleType,route,weather,checklist]);
// Weather for destination on chosen date
useEffect(()=>{const run=async()=>{if(!destination||!moveDateISO)return;try{const r=await fetch(`/api/weather?lat=${destination.lat}&lng=${destination.lng}&date=${moveDateISO}`);if(!r.ok)throw new Error("Weather fetch failed");setWeather(await r.json());}catch(e){console.error(e);}};run();},[destination?.place_id,moveDateISO]);
// Property + traffic fetch when destination changes
useEffect(()=>{const run=async()=>{if(!destination)return;try{const postcode=(destination.address||"").match(/[A-Z]{1,2}\d{1,2}[A-Z]?\s*\d[A-Z]{2}/i)?.[0]||"";const [propRes, trRes]=await Promise.all([fetch('/api/property',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({postcode,lat:destination.lat,lng:destination.lng})}),fetch('/api/traffic',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lat:destination.lat,lng:destination.lng,radiusKm:5})})]);if(propRes.ok){setProperty(await propRes.json());}if(trRes.ok){const t=await trRes.json();setTrafficEvents(t?.events||[]);} }catch(e){console.error(e);} };run();},[destination?.place_id]);
const analyze=async()=>{if(!payload)return;setLoadingAI(true);setError(null);try{const res=await fetch("/api/analyze",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(payload)});const text=await res.text();if(!res.ok){try{const j=JSON.parse(text);throw new Error(j.error||text);}catch{throw new Error(text);}}const data:AIResult=JSON.parse(text);setAI(data);if(data?.autoChecklist)setChecklist(prev=>({...prev,...data.autoChecklist}));}catch(e:any){setError(e?.message||"Analysis failed");}finally{setLoadingAI(false);}};const canAnalyze=Boolean(origin&&destination&&moveDateISO&&vehicleType);
return(<div className="space-y-6"><section className="grid lg:grid-cols-3 gap-6"><div className="lg:col-span-1 card p-4"><h2 className="text-lg font-semibold mb-4">Plan Inputs</h2><div className="space-y-4"><AddressAutocomplete id="origin" label="Origin" placeholder="Enter origin address" value={originText} onChange={setOriginText} onPlaceResolved={setOrigin} /><AddressAutocomplete id="destination" label="Destination" placeholder="Enter destination address" value={destText} onChange={setDestText} onPlaceResolved={setDestination} /><div className="grid grid-cols-2 gap-3"><div><label className="label">Move date</label><input type="date" className="input" value={moveDateISO} onChange={(e)=>setMoveDateISO(e.target.value)} /></div><div><label className="label">Vehicle type</label><select className="input" value={vehicleType} onChange={(e)=>setVehicleType(e.target.value)}>{VEHICLES.map(v=>(<option key={v} value={v}>{v}</option>))}</select></div></div><div className="flex gap-3"><button className={clsx("btn btn-primary",!canAnalyze&&"opacity-50 pointer-events-none")} onClick={analyze} title={!canAnalyze?"Select addresses, date and vehicle":""}>{loadingAI?"Analyzing...":"Analyze Plan"}</button><PdfExport ai={ai} payload={payload} /></div>{error&&<div className="text-sm p-3 rounded-xl border border-rose-700 bg-rose-900/30 text-rose-200">{error}</div>}</div></div><div className="lg:col-span-2 space-y-6"><div className="card p-4"><h2 className="text-lg font-semibold mb-3">Street View</h2><StreetViewToggle origin={origin} destination={destination} /></div><div className="card p-4"><h2 className="text-lg font-semibold mb-3">Route + Overlays</h2><TrafficRouteMap origin={origin} destination={destination} onRoute={setRoute} /></div><div className="grid md:grid-cols-2 gap-4"><div className="card p-4"><h3 className="font-semibold mb-2">Traffic near destination</h3>{trafficEvents.length?(<ul className="text-sm list-disc ml-5 space-y-1">{trafficEvents.slice(0,8).map(ev=>(<li key={ev.id}><span className="text-slate-400">{ev.source}:</span> {ev.title||'Event'}{ev.start?` — ${new Date(ev.start).toLocaleString()}`:''}</li>))}</ul>):(<p className="text-sm text-slate-400">No events fetched yet or none available.</p>)}</div><div className="card p-4"><h3 className="font-semibold mb-2">Property summary</h3>{property?(<div className="text-sm space-y-2">{property.epc?(<div><div className="text-slate-400">EPC:</div><div>Type: {property.epc.property_type||'—'}; Built form: {property.epc.built_form||'—'}</div><div>Floor area: {property.epc.floor_area??'—'} m²; Rating: {property.epc.energy_rating||'—'}</div></div>):(<div className="text-slate-400">EPC not available (add EPC token to env to enable).</div>)}<div><div className="text-slate-400">Planning notes:</div>{property.planningNotes?.length?(<ul className="list-disc ml-5">{property.planningNotes.slice(0,6).map((n,i)=>(<li key={i}>{n}</li>))}</ul>):(<div className="text-slate-400">No notes extracted.</div>)}</div><div><div className="text-slate-400">CPZ rules (sample):</div>{property.cpz?.length?(<ul className="list-disc ml-5">{property.cpz.slice(0,6).map((c,i)=>(<li key={i}><strong>{c.zone||'Zone'}</strong>: {c.hours||'—'} {c.notes?`(${c.notes})`:''}</li>))}</ul>):(<div className="text-slate-400">No CPZ pages configured.</div>)}</div></div>):(<p className="text-sm text-slate-400">Select a destination to fetch property context.</p>)}</div></div><div className="card p-4"><h3 className="font-semibold mb-2">AI Summary</h3>{ai?(<div className="space-y-2 text-sm"><p><span className="text-slate-400">Risk:</span> <span className="font-semibold">{ai.riskLevel}</span></p><p className="text-slate-300">{ai.summary}</p><div><p className="text-slate-400">Origin vs Destination:</p><p>{ai.originVsDest}</p></div><div><p className="text-slate-400">Crew:</p><p>{ai.crewRecommendation}</p></div><div><p className="text-slate-400">Equipment:</p><ul className="list-disc ml-5">{ai.equipment.map((e,i)=>(<li key={i}>{e}</li>))}</ul></div></div>):(<p className="text-slate-400 text-sm">Click <em>Analyze Plan</em> to see recommendations.</p>)}</div></div></section></div>);}
