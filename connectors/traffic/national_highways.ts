import { parseStringPromise } from "xml2js";
export async function fetchNationalHighwaysDATEX(url?:string){const feed=url||process.env.NH_DATEX_URL;if(!feed)return[];try{const r=await fetch(feed,{cache:"no-store"});if(!r.ok)return[];const xml=await r.text();const parsed=await parseStringPromise(xml,{explicitArray:false,mergeAttrs:true});return parsed;}catch{return[];}}
export function datexToEvents(xmlObj:any){const events:any[]=[];const payload=xmlObj?.['d2LogicalModel']?.payloadPublication;if(!payload)return events;const situations=payload.situation||payload.situations?.situation;const arr=Array.isArray(situations)?situations:situations?[situations]:[];for(const s of arr){const records=s.situationRecord||s.situationRecords?.situationRecord;const recs=Array.isArray(records)?records:records?[records]:[];for(const rec of recs){const e:any={id:rec.id||rec['@id']||rec.situationRecordCreationReference||String(Math.random()),title:rec.situationRecordName||rec.comment?.value||rec.impact?.description?.value,category:rec.situationRecordStatus||rec.groupOfLocations?.locationContainedInGroup?.locationName?.value,start:rec.validity?.validityTimeSpecification?.overallStartTime,end:rec.validity?.validityTimeSpecification?.overallEndTime,point:null};const loc=rec?.groupOfLocations?.locationForDisplay;if(loc?.latitude&&loc?.longitude)e.point={lat:parseFloat(loc.latitude),lng:parseFloat(loc.longitude)};events.push(e);}}return events;}
