"use client";
import { useEffect, useRef } from "react";import { useGoogleMaps } from "./GoogleLoader";import type { PlaceLite } from "@/types";
type Props={label:string;placeholder:string;value:string;onChange:(v:string)=>void;onPlaceResolved:(p:PlaceLite|null)=>void;id:string};
export default function AddressAutocomplete({label,placeholder,value,onChange,onPlaceResolved,id}:Props){const ready=useGoogleMaps();const inputRef=useRef<HTMLInputElement|null>(null);const acRef=useRef<google.maps.places.Autocomplete|null>(null);useEffect(()=>{if(!ready||!inputRef.current||acRef.current)return;acRef.current=new google.maps.places.Autocomplete(inputRef.current!,{fields:["place_id","formatted_address","geometry","name","types"]});acRef.current.addListener("place_changed",()=>{const place=acRef.current!.getPlace();if(!place.place_id||!place.geometry?.location){onPlaceResolved(null);return;}const lat=place.geometry.location.lat(),lng=place.geometry.location.lng();onPlaceResolved({place_id:place.place_id,description:place.name||place.formatted_address||"Selected place",lat,lng,address:place.formatted_address||undefined});});},[ready]);return (<div className="space-y-1"><label htmlFor={id} className="label">{label}</label><input id={id} ref={inputRef} className="input" placeholder={placeholder} value={value} onChange={e=>onChange(e.target.value)} /><p className="text-xs" style={{opacity:.7}}>Start typing and <span style={{textDecoration:'underline'}}>choose a suggestion</span> to lock in the place.</p></div>);}
