"use client";
import { useEffect, useRef, useState } from "react";import { useGoogleMaps } from "./GoogleLoader";import type { PlaceLite, RouteInfo, TrafficEvent } from "@/types";import { formatDistance, formatDuration } from "@/lib/utils";
export default function TrafficRouteMap({origin,destination,onRoute}:{origin:PlaceLite|null;destination:PlaceLite|null;onRoute:(r:RouteInfo|null)=>void}){const ready=useGoogleMaps();const mapRef=useRef<HTMLDivElement|null>(null);const mapObjRef=useRef<google.maps.Map|null>(null);const dirRendererRef=useRef<google.maps.DirectionsRenderer|null>(null);const dirServiceRef=useRef<google.maps.DirectionsService|null>(null);const trafficLayerRef=useRef<google.maps.TrafficLayer|null>(null);const [distance,setDistance]=useState<number|null>(null);const [duration,setDuration]=useState<number|null>(null);const [durationTraffic,setDurationTraffic]=useState<number|null>(null);const markersRef=useRef<google.maps.Marker[]>([]);const dataLayersRef=useRef<google.maps.Data[]>([]);
useEffect(()=>{if(!ready||!mapRef.current||mapObjRef.current)return;mapObjRef.current=new google.maps.Map(mapRef.current,{center:{lat:51.509865,lng:-0.118092},zoom:9,mapId:"DEMO_MAP_ID"});dirRendererRef.current=new google.maps.DirectionsRenderer({suppressMarkers:false});dirRendererRef.current.setMap(mapObjRef.current);dirServiceRef.current=new google.maps.DirectionsService();trafficLayerRef.current=new google.maps.TrafficLayer();trafficLayerRef.current.setMap(mapObjRef.current);},[ready]);
useEffect(()=>{if(!ready||!dirServiceRef.current||!dirRendererRef.current)return;if(!(origin&&destination)){setDistance(null);setDuration(null);setDurationTraffic(null);onRoute(null);return;}dirServiceRef.current.route({origin:new google.maps.LatLng(origin.lat,origin.lng),destination:new google.maps.LatLng(destination.lat,destination.lng),travelMode:google.maps.TravelMode.DRIVING,drivingOptions:{departureTime:new Date(),trafficModel:google.maps.TrafficModel.BEST_GUESS}},(res,status)=>{if(status==="OK"&&res){dirRendererRef.current!.setDirections(res);const leg=res.routes[0]?.legs[0];const dist=leg?.distance?.value??null;const base=leg?.duration?.value??null;const traf=leg?.duration_in_traffic?.value??base??null;setDistance(dist);setDuration(base);setDurationTraffic(traf);onRoute(dist&&base?{distance_m:dist,duration_s:base,duration_in_traffic_s:traf||undefined}:null);}else{setDistance(null);setDuration(null);setDurationTraffic(null);onRoute(null);}});},[origin?.place_id,destination?.place_id,ready]);
// Fetch overlays & traffic events when destination changes
useEffect(()=>{(async()=>{if(!mapObjRef.current||!destination)return; // clear old markers
markersRef.current.forEach(m=>m.setMap(null));markersRef.current=[];dataLayersRef.current.forEach(d=>d.setMap(null));dataLayersRef.current=[];try{const [ovRes, trRes]=await Promise.all([fetch('/api/overlays'), fetch('/api/traffic',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lat:destination.lat,lng:destination.lng,radiusKm:5})})]);if(ovRes.ok){const o=await ovRes.json();['ulez','lez','llcs'].forEach((k)=>{const fc=o?.[k];if(fc&&mapObjRef.current){const data=new google.maps.Data({map:mapObjRef.current});data.addGeoJson(fc);data.setStyle({fillOpacity:0.05,strokeWeight:1});dataLayersRef.current.push(data);}});}if(trRes.ok){const t=await trRes.json();const events:TrafficEvent[]=t?.events||[];for(const ev of events){if(!ev.point)continue;const m=new google.maps.Marker({position:ev.point,map:mapObjRef.current,title:`${ev.source}: ${ev.title||''}`});markersRef.current.push(m);}}}catch(e){console.error(e);}})();},[destination?.place_id,ready]);
return(<div className="space-y-3"><div className="card" style={{height:'22rem',overflow:'hidden'}}><div ref={mapRef} style={{height:'100%'}}/></div><div className="flex" style={{gap:12,flexWrap:'wrap',fontSize:14,opacity:.9}}><span className="badge">Distance: <strong style={{marginLeft:4}}>{distance!=null?formatDistance(distance):"—"}</strong></span><span className="badge">Base ETA: <strong style={{marginLeft:4}}>{duration!=null?formatDuration(duration):"—"}</strong></span><span className="badge">ETA (traffic): <strong style={{marginLeft:4}}>{durationTraffic!=null?formatDuration(durationTraffic):"—"}</strong></span></div></div>);}
