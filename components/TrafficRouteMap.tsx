"use client";
import { useEffect, useRef, useState } from "react";import { useGoogleMaps } from "./GoogleLoader";import type { PlaceLite, RouteInfo } from "@/types";import { formatDistance, formatDuration } from "@/lib/utils";
export default function TrafficRouteMap({origin,destination,onRoute}:{origin:PlaceLite|null;destination:PlaceLite|null;onRoute:(info:RouteInfo|null)=>void}){const ready=useGoogleMaps();const mapRef=useRef<HTMLDivElement|null>(null);const mapObjRef=useRef<google.maps.Map|null>(null);const dirRendererRef=useRef<google.maps.DirectionsRenderer|null>(null);const dirServiceRef=useRef<google.maps.DirectionsService|null>(null);const trafficLayerRef=useRef<google.maps.TrafficLayer|null>(null);const [distance,setDistance]=useState<number|null>(null);const [duration,setDuration]=useState<number|null>(null);const [durationTraffic,setDurationTraffic]=useState<number|null>(null);useEffect(()=>{if(!ready||!mapRef.current||mapObjRef.current)return;mapObjRef.current=new google.maps.Map(mapRef.current,{center:{lat:51.509865,lng:-0.118092},zoom:9,mapId:"DEMO_MAP_ID"});dirRendererRef.current=new google.maps.DirectionsRenderer();dirRendererRef.current.setMap(mapObjRef.current);dirServiceRef.current=new google.maps.DirectionsService();trafficLayerRef.current=new google.maps.TrafficLayer();trafficLayerRef.current.setMap(mapObjRef.current);},[ready]);useEffect(()=>{if(!ready||!mapObjRef.current||!dirServiceRef.current||!dirRendererRef.current)return;if(!(origin&&destination)){setDistance(null);setDuration(null);setDurationTraffic(null);onRoute(null);return;}const req:google.maps.DirectionsRequest={origin:new google.maps.LatLng(origin.lat,origin.lng),destination:new google.maps.LatLng(destination.lat,destination.lng),travelMode:google.maps.TravelMode.DRIVING,drivingOptions:{departureTime:new Date(),trafficModel:google.maps.TrafficModel.BEST_GUESS}};dirServiceRef.current.route(req,(result,status)=>{if(status==="OK"&&result){dirRendererRef.current!.setDirections(result);const leg=result.routes[0]?.legs[0];const dist=leg?.distance?.value??null;const base=leg?.duration?.value??null;const traf=leg?.duration_in_traffic?.value??base??null;setDistance(dist);setDuration(base);setDurationTraffic(traf);onRoute(dist&&base?{distance_m:dist,duration_s:base,duration_in_traffic_s:traf||undefined}:null);}else{setDistance(null);setDuration(null);setDurationTraffic(null);onRoute(null);}});},[origin?.place_id,destination?.place_id,ready]);return (<div className="space-y-3"><div className="card" style={{height:'18rem',overflow:'hidden'}}><div ref={mapRef} style={{height:'100%'}} /></div><div className="flex" style={{gap:12,flexWrap:'wrap',fontSize:14,opacity:.9}}><span className="badge">Distance: <strong style={{marginLeft:4}}>{distance!=null?formatDistance(distance):"—"}</strong></span><span className="badge">Base ETA: <strong style={{marginLeft:4}}>{duration!=null?formatDuration(duration):"—"}</strong></span><span className="badge">ETA (traffic): <strong style={{marginLeft:4}}>{durationTraffic!=null?formatDuration(durationTraffic):"—"}</strong></span></div></div>);}
